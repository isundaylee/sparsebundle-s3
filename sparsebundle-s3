#!/usr/bin/env python3

import logging
import sys
import threading
import queue
import os
import glob
import argparse

import sparsebundle_s3.packer as packer
import sparsebundle_s3.uploader as uploader

PACKAGE_COUNT = 0x100
STORAGE_CLASS = 'DEEP_ARCHIVE'

logger = logging.getLogger('main')


def main():
    logging.basicConfig(
        format="[%(asctime)-15s] [%(levelname)-8s] [%(name)-8s] %(message)s",
        level=logging.INFO)

    parser = argparse.ArgumentParser(
        description="Packages and uploads a macOS sparse bundle onto S3.")
    parser.add_argument('bundle', help='Path to the sparse bundle file.')
    parser.add_argument(
        'tmpdir', help='Path to a temporary dir for storing band packages.')
    parser.add_argument('bucket', help='S3 bucket to upload to.')
    parser.add_argument('name', help='Top-level S3 prefix to upload to.')

    args = parser.parse_args()
    bundle = args.bundle
    outdir = args.tmpdir
    bucket = args.bucket
    name = args.name

    logger.info('Retrieving bundle file list')
    bundle_files = list(glob.glob(os.path.join(bundle, '**'), recursive=True))
    logger.info('Bundle contains %d files', len(bundle_files))

    package_queue = queue.Queue()
    stop_event = threading.Event()

    packer_thread = threading.Thread(
        target=packer.pack,
        args=(bundle, bundle_files, outdir, PACKAGE_COUNT, package_queue,
              stop_event))
    uploader_thread = threading.Thread(
        target=uploader.upload,
        args=(bundle, bundle_files, outdir, bucket, name, STORAGE_CLASS,
              package_queue, stop_event))

    packer_thread.start()
    uploader_thread.start()

    try:
        packer_thread.join()
        uploader_thread.join()
    except KeyboardInterrupt:
        stop_event.set()
        logger.info('Stopping...')
    except RuntimeError as e:
        stop_event.set()
        logger.critical("%s", e)
        logger.info('Stopping...')


main()
